// Este es tu archivo Prisma schema
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Usamos una variable de entorno
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"] // Agrega esto
}

model Vehiculo {
  id        Int     @id @default(autoincrement())
  placa     String  @unique
  modelo    String
  marca     String
  color     String
  tipo      String  // "carro" o "moto"
  atributo  String? // Atributo específico
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación con Carro y Moto
  carro     Carro?  @relation("CarroVehiculo") // Relación opcional
  moto      Moto?   @relation("MotoVehiculo")  // Relación opcional

  // Relación con Ficha (campo inverso)
  ficha     Ficha?  @relation("VehiculoFicha") // Relación inversa
}

model Carro {
  id          Int      @id @default(autoincrement())
  vehiculoID  Int     @unique // Campo único
  vehiculo    Vehiculo @relation("CarroVehiculo", fields: [vehiculoID], references: [id])
  numPuertas  Int?     // Atributo específico para carro
}

model Moto {
  id          Int      @id @default(autoincrement())
  vehiculoID  Int     @unique // Campo único
  vehiculo    Vehiculo @relation("MotoVehiculo", fields: [vehiculoID], references: [id])
  cilindraje  Int?     // Atributo específico para moto
}

model Ficha {
  id           Int      @id @default(autoincrement())
  estadoPago   Boolean  // Estado del pago: true = pagado, false = no pagado
  fechaEntrada DateTime @default(now()) // Fecha de entrada
  fechaSalida  DateTime? // Fecha de salida (puede ser nula hasta que el vehículo salga)
  vehiculoId   Int      @unique  // Relación con Vehiculo
  vehiculo     Vehiculo @relation(fields: [vehiculoId], references: [id], name: "VehiculoFicha") // Relación con Vehiculo
}
